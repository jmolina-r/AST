
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'PLUS MINUS TIMES DIVIDE LPAREN RPAREN LBRACE RBRACE LSQUAREBRACKET RSQUAREBRACKET LESS GREATER MUCHSMALLER MUCHGREATER EQUAL UNEQUAL COMMA SEMICOLON ASSIGN MULTCOMMMENT LINECOMMENT ID NUM RETURN INT VOID ELSE WHILE IFprogram : declaration-listdeclaration-list : declaration-list declaration\n                          | declarationdeclaration : var-declarationdeclaration : fun-declarationvar-declaration : type-specifier ID SEMICOLONvar-declaration : type-specifier ID LBRACE NUM RBRACE SEMICOLONtype-specifier : INTtype-specifier : VOIDfun-declaration : type-specifier ID LPAREN params RPAREN compound-stmtparams : param-listparams : VOIDparam-list : param-list COMMA param\n    | paramparam : type-specifier IDparam : type-specifier ID LSQUAREBRACKET RSQUAREBRACKETcompound-stmt : LBRACE local-declarations statement-list RBRACElocal-declarations : local-declarations var-declaration\n                            | emptystatement-list : statement-list statement\n                        | emptystatement : expression-stmtstatement : compound-stmtstatement : selection-stmtstatement : iteration-stmtstatement : return-stmtexpression-stmt : expression SEMICOLONexpression-stmt : SEMICOLONselection-stmt : IF LPAREN expression RPAREN statementselection-stmt : IF LPAREN expression RPAREN statement ELSE statementiteration-stmt : WHILE LPAREN expression RPAREN statementreturn-stmt : RETURN SEMICOLONreturn-stmt : RETURN expression SEMICOLONexpression : var ASSIGN expressionexpression : simple-expressionvar : ID var : ID LBRACE expression RBRACEsimple-expression : additive-expression relop additive-expressionsimple-expression : additive-expressionrelop : MUCHSMALLERrelop : LESSrelop : GREATERrelop : MUCHGREATERrelop : EQUALrelop : UNEQUALadditive-expression : additive-expression addop termadditive-expression : termaddop : PLUSaddop :  MINUSterm : term mulop factorterm : factormulop : TIMESmulop : DIVIDEfactor :  LPAREN expression RPARENfactor : varfactor : callfactor : NUMcall : ID LPAREN args RPARENargs : arg-listargs : emptyarg-list : arg-list COMMA expressionarg-list : expressionempty :'
    
_lr_action_items = {'RETURN':([12,24,25,29,30,32,33,35,39,40,43,46,47,48,50,56,58,79,80,94,98,99,101,102,103,],[-6,-7,-63,-63,-19,36,-18,-21,-26,-28,-20,-17,-22,-24,-23,-25,-32,-27,-33,36,36,-31,-29,36,-30,]),'LESS':([38,41,42,44,45,51,53,82,83,86,93,95,96,],[64,-57,-56,-51,-55,-36,-47,-46,-55,-54,-50,-37,-58,]),'VOID':([0,3,4,6,8,9,12,13,23,24,25,26,29,30,33,46,],[2,-5,2,-3,-4,-2,-6,15,2,-7,-63,-10,2,-19,-18,-17,]),'EQUAL':([38,41,42,44,45,51,53,82,83,86,93,95,96,],[66,-57,-56,-51,-55,-36,-47,-46,-55,-54,-50,-37,-58,]),'WHILE':([12,24,25,29,30,32,33,35,39,40,43,46,47,48,50,56,58,79,80,94,98,99,101,102,103,],[-6,-7,-63,-63,-19,37,-18,-21,-26,-28,-20,-17,-22,-24,-23,-25,-32,-27,-33,37,37,-31,-29,37,-30,]),'UNEQUAL':([38,41,42,44,45,51,53,82,83,86,93,95,96,],[62,-57,-56,-51,-55,-36,-47,-46,-55,-54,-50,-37,-58,]),'MINUS':([38,41,42,44,45,51,53,82,83,84,86,93,95,96,],[69,-57,-56,-51,-55,-36,-47,-46,-55,69,-54,-50,-37,-58,]),'DIVIDE':([41,42,44,45,51,53,82,83,86,93,95,96,],[-57,-56,-51,-55,-36,77,77,-55,-54,-50,-37,-58,]),'RPAREN':([15,16,17,19,22,28,31,38,41,42,44,45,51,53,54,72,74,81,82,83,84,85,86,88,89,90,91,92,93,95,96,100,],[-12,-14,21,-11,-15,-13,-16,-39,-57,-56,-51,-55,-36,-47,-35,86,-63,94,-46,-55,-38,-34,-54,96,-59,-62,-60,98,-50,-37,-58,-61,]),'SEMICOLON':([10,12,20,24,25,29,30,32,33,35,36,38,39,40,41,42,43,44,45,46,47,48,50,51,53,54,55,56,57,58,59,79,80,82,83,84,85,86,93,94,95,96,98,99,101,102,103,],[12,-6,24,-7,-63,-63,-19,40,-18,-21,58,-39,-26,-28,-57,-56,-20,-51,-55,-17,-22,-24,-23,-36,-47,-35,79,-25,12,-32,80,-27,-33,-46,-55,-38,-34,-54,-50,40,-37,-58,40,-31,-29,40,-30,]),'NUM':([11,12,24,25,29,30,32,33,35,36,39,40,43,46,47,48,49,50,56,58,60,61,62,63,64,65,66,67,68,69,70,71,73,74,75,76,77,78,79,80,94,97,98,99,101,102,103,],[14,-6,-7,-63,-63,-19,41,-18,-21,41,-26,-28,-20,-17,-22,-24,41,-23,-25,-32,41,41,-45,41,-41,-43,-44,-40,-48,-49,-42,41,41,41,41,-52,-53,41,-27,-33,41,41,41,-31,-29,41,-30,]),'PLUS':([38,41,42,44,45,51,53,82,83,84,86,93,95,96,],[68,-57,-56,-51,-55,-36,-47,-46,-55,68,-54,-50,-37,-58,]),'COMMA':([16,19,22,28,31,38,41,42,44,45,51,53,54,82,83,84,85,86,89,90,93,95,96,100,],[-14,23,-15,-13,-16,-39,-57,-56,-51,-55,-36,-47,-35,-46,-55,-38,-34,-54,97,-62,-50,-37,-58,-61,]),'IF':([12,24,25,29,30,32,33,35,39,40,43,46,47,48,50,56,58,79,80,94,98,99,101,102,103,],[-6,-7,-63,-63,-19,52,-18,-21,-26,-28,-20,-17,-22,-24,-23,-25,-32,-27,-33,52,52,-31,-29,52,-30,]),'ASSIGN':([45,51,95,],[71,-36,-37,]),'$end':([3,4,5,6,8,9,12,24,26,46,],[-5,-1,0,-3,-4,-2,-6,-7,-10,-17,]),'LSQUAREBRACKET':([22,],[27,]),'RBRACE':([12,14,24,25,29,30,32,33,35,38,39,40,41,42,43,44,45,46,47,48,50,51,53,54,56,58,79,80,82,83,84,85,86,87,93,95,96,99,101,103,],[-6,20,-7,-63,-63,-19,46,-18,-21,-39,-26,-28,-57,-56,-20,-51,-55,-17,-22,-24,-23,-36,-47,-35,-25,-32,-27,-33,-46,-55,-38,-34,-54,95,-50,-37,-58,-31,-29,-30,]),'MUCHGREATER':([38,41,42,44,45,51,53,82,83,86,93,95,96,],[65,-57,-56,-51,-55,-36,-47,-46,-55,-54,-50,-37,-58,]),'ELSE':([39,40,46,47,48,50,56,58,79,80,99,101,103,],[-26,-28,-17,-22,-24,-23,-25,-32,-27,-33,-31,102,-30,]),'LPAREN':([10,12,24,25,29,30,32,33,35,36,37,39,40,43,46,47,48,49,50,51,52,56,58,60,61,62,63,64,65,66,67,68,69,70,71,73,74,75,76,77,78,79,80,94,97,98,99,101,102,103,],[13,-6,-7,-63,-63,-19,49,-18,-21,49,60,-26,-28,-20,-17,-22,-24,49,-23,74,75,-25,-32,49,49,-45,49,-41,-43,-44,-40,-48,-49,-42,49,49,49,49,-52,-53,49,-27,-33,49,49,49,-31,-29,49,-30,]),'TIMES':([41,42,44,45,51,53,82,83,86,93,95,96,],[-57,-56,-51,-55,-36,76,76,-55,-54,-50,-37,-58,]),'ID':([1,2,7,12,15,18,24,25,29,30,32,33,34,35,36,39,40,43,46,47,48,49,50,56,58,60,61,62,63,64,65,66,67,68,69,70,71,73,74,75,76,77,78,79,80,94,97,98,99,101,102,103,],[-8,-9,10,-6,-9,22,-7,-63,-63,-19,51,-18,57,-21,51,-26,-28,-20,-17,-22,-24,51,-23,-25,-32,51,51,-45,51,-41,-43,-44,-40,-48,-49,-42,51,51,51,51,-52,-53,51,-27,-33,51,51,51,-31,-29,51,-30,]),'RSQUAREBRACKET':([27,],[31,]),'LBRACE':([10,12,21,24,25,29,30,32,33,35,39,40,43,46,47,48,50,51,56,57,58,79,80,94,98,99,101,102,103,],[11,-6,25,-7,-63,-63,-19,25,-18,-21,-26,-28,-20,-17,-22,-24,-23,73,-25,11,-32,-27,-33,25,25,-31,-29,25,-30,]),'GREATER':([38,41,42,44,45,51,53,82,83,86,93,95,96,],[70,-57,-56,-51,-55,-36,-47,-46,-55,-54,-50,-37,-58,]),'INT':([0,3,4,6,8,9,12,13,23,24,25,26,29,30,33,46,],[1,-5,1,-3,-4,-2,-6,1,1,-7,-63,-10,1,-19,-18,-17,]),'MUCHSMALLER':([38,41,42,44,45,51,53,82,83,86,93,95,96,],[67,-57,-56,-51,-55,-36,-47,-46,-55,-54,-50,-37,-58,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'declaration':([0,4,],[6,9,]),'additive-expression':([32,36,49,60,63,71,73,74,75,94,97,98,102,],[38,38,38,38,84,38,38,38,38,38,38,38,38,]),'return-stmt':([32,94,98,102,],[39,39,39,39,]),'param':([13,23,],[16,28,]),'var-declaration':([0,4,29,],[8,8,33,]),'arg-list':([74,],[89,]),'program':([0,],[5,]),'call':([32,36,49,60,61,63,71,73,74,75,78,94,97,98,102,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'statement':([32,94,98,102,],[43,99,101,103,]),'factor':([32,36,49,60,61,63,71,73,74,75,78,94,97,98,102,],[44,44,44,44,44,44,44,44,44,44,93,44,44,44,44,]),'var':([32,36,49,60,61,63,71,73,74,75,78,94,97,98,102,],[45,45,45,45,83,83,45,45,45,45,83,45,45,45,45,]),'params':([13,],[17,]),'empty':([25,29,74,],[30,35,91,]),'addop':([38,84,],[61,61,]),'mulop':([53,82,],[78,78,]),'args':([74,],[88,]),'expression-stmt':([32,94,98,102,],[47,47,47,47,]),'compound-stmt':([21,32,94,98,102,],[26,50,50,50,50,]),'term':([32,36,49,60,61,63,71,73,74,75,94,97,98,102,],[53,53,53,53,82,53,53,53,53,53,53,53,53,53,]),'selection-stmt':([32,94,98,102,],[48,48,48,48,]),'relop':([38,],[63,]),'fun-declaration':([0,4,],[3,3,]),'declaration-list':([0,],[4,]),'local-declarations':([25,],[29,]),'param-list':([13,],[19,]),'statement-list':([29,],[32,]),'simple-expression':([32,36,49,60,71,73,74,75,94,97,98,102,],[54,54,54,54,54,54,54,54,54,54,54,54,]),'type-specifier':([0,4,13,23,29,],[7,7,18,18,34,]),'expression':([32,36,49,60,71,73,74,75,94,97,98,102,],[55,59,72,81,85,87,90,92,55,100,55,55,]),'iteration-stmt':([32,94,98,102,],[56,56,56,56,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> declaration-list','program',1,'p_program','parser.py',13),
  ('declaration-list -> declaration-list declaration','declaration-list',2,'p_declaration_list01','parser.py',18),
  ('declaration-list -> declaration','declaration-list',1,'p_declaration_list01','parser.py',19),
  ('declaration -> var-declaration','declaration',1,'p_declaration01','parser.py',36),
  ('declaration -> fun-declaration','declaration',1,'p_declaration02','parser.py',40),
  ('var-declaration -> type-specifier ID SEMICOLON','var-declaration',3,'p_var_declaration01','parser.py',44),
  ('var-declaration -> type-specifier ID LBRACE NUM RBRACE SEMICOLON','var-declaration',6,'p_var_declaration02','parser.py',49),
  ('type-specifier -> INT','type-specifier',1,'p_type_specifier01','parser.py',54),
  ('type-specifier -> VOID','type-specifier',1,'p_type_specifier02','parser.py',59),
  ('fun-declaration -> type-specifier ID LPAREN params RPAREN compound-stmt','fun-declaration',6,'p_fun_declaration','parser.py',63),
  ('params -> param-list','params',1,'p_params01','parser.py',68),
  ('params -> VOID','params',1,'p_params02','parser.py',72),
  ('param-list -> param-list COMMA param','param-list',3,'p_param_list01','parser.py',76),
  ('param-list -> param','param-list',1,'p_param_list01','parser.py',77),
  ('param -> type-specifier ID','param',2,'p_param01','parser.py',94),
  ('param -> type-specifier ID LSQUAREBRACKET RSQUAREBRACKET','param',4,'p_param02','parser.py',98),
  ('compound-stmt -> LBRACE local-declarations statement-list RBRACE','compound-stmt',4,'p_compound_stmt','parser.py',102),
  ('local-declarations -> local-declarations var-declaration','local-declarations',2,'p_local_declarations01','parser.py',106),
  ('local-declarations -> empty','local-declarations',1,'p_local_declarations01','parser.py',107),
  ('statement-list -> statement-list statement','statement-list',2,'p_statement_list01','parser.py',123),
  ('statement-list -> empty','statement-list',1,'p_statement_list01','parser.py',124),
  ('statement -> expression-stmt','statement',1,'p_statement01','parser.py',140),
  ('statement -> compound-stmt','statement',1,'p_statement02','parser.py',145),
  ('statement -> selection-stmt','statement',1,'p_statement03','parser.py',150),
  ('statement -> iteration-stmt','statement',1,'p_statement04','parser.py',155),
  ('statement -> return-stmt','statement',1,'p_statement05','parser.py',160),
  ('expression-stmt -> expression SEMICOLON','expression-stmt',2,'p_expression_stmt01','parser.py',165),
  ('expression-stmt -> SEMICOLON','expression-stmt',1,'p_expression_stmt02','parser.py',170),
  ('selection-stmt -> IF LPAREN expression RPAREN statement','selection-stmt',5,'p_selection_stmt01','parser.py',174),
  ('selection-stmt -> IF LPAREN expression RPAREN statement ELSE statement','selection-stmt',7,'p_selection_stmt02','parser.py',178),
  ('iteration-stmt -> WHILE LPAREN expression RPAREN statement','iteration-stmt',5,'p_iteration_stmt','parser.py',182),
  ('return-stmt -> RETURN SEMICOLON','return-stmt',2,'p_return_stmt01','parser.py',186),
  ('return-stmt -> RETURN expression SEMICOLON','return-stmt',3,'p_return_stmt02','parser.py',190),
  ('expression -> var ASSIGN expression','expression',3,'p_expression01','parser.py',194),
  ('expression -> simple-expression','expression',1,'p_expression02','parser.py',198),
  ('var -> ID','var',1,'p_var01','parser.py',203),
  ('var -> ID LBRACE expression RBRACE','var',4,'p_var02','parser.py',207),
  ('simple-expression -> additive-expression relop additive-expression','simple-expression',3,'p_simple_expression01','parser.py',212),
  ('simple-expression -> additive-expression','simple-expression',1,'p_simple_expression02','parser.py',216),
  ('relop -> MUCHSMALLER','relop',1,'p_relop01','parser.py',221),
  ('relop -> LESS','relop',1,'p_relop02','parser.py',225),
  ('relop -> GREATER','relop',1,'p_relop03','parser.py',229),
  ('relop -> MUCHGREATER','relop',1,'p_relop04','parser.py',234),
  ('relop -> EQUAL','relop',1,'p_relop05','parser.py',238),
  ('relop -> UNEQUAL','relop',1,'p_relop06','parser.py',243),
  ('additive-expression -> additive-expression addop term','additive-expression',3,'p_additive_expression01','parser.py',248),
  ('additive-expression -> term','additive-expression',1,'p_additive_expression02','parser.py',252),
  ('addop -> PLUS','addop',1,'p_addop01','parser.py',257),
  ('addop -> MINUS','addop',1,'p_addop02','parser.py',261),
  ('term -> term mulop factor','term',3,'p_term01','parser.py',265),
  ('term -> factor','term',1,'p_term02','parser.py',269),
  ('mulop -> TIMES','mulop',1,'p_mulop01','parser.py',274),
  ('mulop -> DIVIDE','mulop',1,'p_mulop02','parser.py',278),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor01','parser.py',282),
  ('factor -> var','factor',1,'p_factor02','parser.py',286),
  ('factor -> call','factor',1,'p_factor03','parser.py',291),
  ('factor -> NUM','factor',1,'p_factor04','parser.py',296),
  ('call -> ID LPAREN args RPAREN','call',4,'p_call','parser.py',300),
  ('args -> arg-list','args',1,'p_args01','parser.py',304),
  ('args -> empty','args',1,'p_args02','parser.py',309),
  ('arg-list -> arg-list COMMA expression','arg-list',3,'p_arg_list01','parser.py',312),
  ('arg-list -> expression','arg-list',1,'p_arg_list02','parser.py',316),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',321),
]
